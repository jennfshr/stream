_base:
    maintainer:
        name: Francine Lapid
        email: lapid@lanl.gov
    subtitle: '{{compilers.name}}/{{compilers.version}} {{mpis.name}}/{{mpis.version}}'
    summary: 'Runs STREAM Memory Benchmark'
    doc: |

        The STREAM source code has a parameter, N, that represents the length of the arrays used in the tests.
        It is important to set N such that the test touches a large enough portion of the memory.
        The vectors are of type DOUBLE PRECISION and there are three vectors A,B,C of this length. So for 8 byte doubles 3*8*N bytes are required.
        Required Runs for Trinity/NERSC-8

        On a multi-core node with "n" hardware cores and M bytes of main memory STREAM must be executed as follows:

        The parameter N adjusted such that the used memory is 0.6*M. Note that three arrays of length N are allocated, so N has to be approximately 0.6*M/3.
        Two results must be reported

          a) maximum bandwidth with enough OpenMP threads to utilize all hardware cores and hardware threads (fully packed)
          b) bandwidth for a vendor determined minimum number of cores and threads that achieves maximum bandwidth

        If results a) and b) are the same, only report a single result. In both cases, report the number of cores and threads used as well as their placement and affinity, if applicable.

        This test exercises the communication speeds between nodes/ranks.

        The only verification that this test does of the results is to find the
        string 'Solution Validates:' in the output.  If that isn't found but the
        test did run, it will take a deeper investigation of the results to
        determine the issue.  The other results will be captured by Splunk and
        could be compared against previous results to see if any significant
        differences can be found.  If so, there may be an issue with the High
        Speed Network backbone.

        INSTRUCTIONS:

             1) STREAM requires different amounts of memory to run on different
                  systems, depending on both the system cache size(s) and the
                  granularity of the system timer.
            You should adjust the value of 'STREAM_ARRAY_SIZE' (below)
                  to meet *both* of the following criteria:
              (a) Each array must be at least 4 times the size of the
                  available cache memory. I don't worry about the difference
                  between 10^6 and 2^20, so in practice the minimum array size
                  is about 3.8 times the cache size.
                  Example 1: One Xeon E3 with 8 MB L3 cache
                      STREAM_ARRAY_SIZE should be >= 4 million, giving
                      an array size of 30.5 MB and a total memory requirement
                      of 91.5 MB.
                  Example 2: Two Xeon E5's with 20 MB L3 cache each (using OpenMP)
                      STREAM_ARRAY_SIZE should be >= 20 million, giving
                      an array size of 153 MB and a total memory requirement
                      of 458 MB.
              (b) The size should be large enough so that the 'timing calibration'
                  output by the program is at least 20 clock-ticks.
                  Example: most versions of Windows have a 10 millisecond timer
                      granularity.  20 "ticks" at 10 ms/tic is 200 milliseconds.
                      If the chip is capable of 10 GB/s, it moves 2 GB in 200 msec.
                      This means the each array must be at least 1 GB, or 128M elements.

             Version 5.10 increases the default array size from 2 million
                 elements to 10 million elements in response to the increasing
                 size of L3 caches.  The new default size is large enough for caches
                 up to 20 MB.
             Version 5.10 changes the loop index variables from "register int"
                 to "ssize_t", which allows array indices >2^32 (4 billion)
                 on properly configured 64-bit systems.  Additional compiler options
                 (such as "-mcmodel=medium") may be required for large memory runs.

             Array size can be set at compile time without modifying the source
                 code for the (many) compilers that support preprocessor definitions
                 on the compile line.  E.g.,
                       gcc -O -DSTREAM_ARRAY_SIZE=100000000 stream.c -o stream.100M
                 will override the default size of 10M with a new size of 100M elements
                 per array.

            STREAM ARRAY SIZE CALCULATIONS:
            ###############
            STREAM
            XRDS DOCUMENTATION: 4 x (45 MiB cache / processor) x (2 processors) / (3 arrays) / (8 bytes / element) = 15 Mi elements = 15000000
            *****************************************************************************************************
            HASWELL: Intel(R) Xeon(R) CPU E5-2698 v3 @ 2.30GHz
            CACHE: 40M
            SOCKETS: 2
            4 * ( 40M * 2 ) / 3 ARRAYS / 8 Bytes/element =  13.4 Mi elements = 13400000
            *****************************************************************************************************
            BROADWELL: Intel(R) Xeon(R) CPU E5-2695 v4 @ 2.10GHz
            CACHE: 45M
            SOCKETS: 2
            4 * ( 45M * 2 ) / 3 ARRAYS / 8 BYTES/ELEMENT = 15.0 Mi elements = 15000000
            *****************************************************************************************************
            ROME: AMD EPYC 7H12 64-Core Processor
            CACHE: 256M
            SOCKETS: 2
            4 * ( 256M * 2 ) / 3 ARRAYS / 8 BYTES/ELEMENT = 85.33 Mi elements = 85333333
            *****************************************************************************************************
            SAPPHIRE RAPIDS (DDR5): Intel(R) Xeon(R) Platinum 8480+
            CACHE: 107.52M
            SOCKETS: 2
            4 x (107.52M * 2 ) / 3 ARRAYS / 8 BYTES/ELEMENT = 35.84 Mi elements = 35840000
            *****************************************************************************************************
            SAPPHIRE RAPIDS (HBM): ??
            CACHE: 115.2M
            SOCKETS: 2
            4 x (115.2M * 2 ) / 3 ARRAYS / 8 BYTES/ELEMENT = 38.4 Mi elements = 38400000

    scheduler: slurm
    schedule:
        nodes: 'all' # 'ALL'
        tasks_per_node: 1
        share_allocation: false

    permute_on:
        - compilers
        - mpis
    #    - omp_num_threads
        - stream_array_size

    build:
        source_path: stream/src
        on_nodes: true
        preamble: "[~{{preamble}}\n~]"
        cmds:
            - 'NTIMES=${NTIMES:=10}'
            - 'N={{stream_array_size}}'
            - ''
            - 'if [[ "{{compilers.name}}" =\~ intel ]] ; then '
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-O3 -fma -ffreestanding -qopenmp -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES -mcmodel=medium"'
            - '   PAV_FFLAGS="-O3"'
            - 'elif [[ "{{compilers.name}}" =\~ cce ]] ; then'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-floop-trips=huge -Ofast -march=sapphirerapids -fopenmp -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"'
            - '   PAV_FFLAGS="-O3"'
            - 'else'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-O3 -ffreestanding -fopenmp -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"' 
            - '   PAV_FFLAGS="-O3"'
            - 'fi'
            - 'export PAV_CC PAV_FC PAV_CFLAGS PAV_FFLAGS'
            - 'make clean'
            - 'make {{target}} || exit 1'
            - '[ -x {{target}} ] || exit 1'
#
# TODO REVISIT THIS AS WE DON'T WANT TO RUN THREADED PROBLEM
    run:
        env:
            CC: '{{compilers.cc}}'
            OMP_NUM_THREADS: '1'
        preamble: "[~{{preamble}}\n~]"
        cmds:
            - 'NTIMES=${NTIMES:=10}'
            - 'N={{stream_array_size}}'
            - 'echo "OMP_NUM_THREADS: $OMP_NUM_THREADS"'
            - 'echo "NTIMES=$NTIMES"'
            - 'echo "N=${N}"'
            - 'count=0'
            - 'for node in $(scontrol show hostname)'
            - 'do'
            - '  srun -w $node -N1 -n{{sched.tasks_per_node}} ./{{target}} &>${node}_stream &'
#NUMA node0 CPU(s):               0-13,112-125
#NUMA node1 CPU(s):               14-27,126-139
#NUMA node2 CPU(s):               28-41,140-153
#NUMA node3 CPU(s):               42-55,154-167
#NUMA node4 CPU(s):               56-69,168-181
#NUMA node5 CPU(s):               70-83,182-195
#NUMA node6 CPU(s):               84-97,196-209
#NUMA node7 CPU(s):               98-111,210-223
            - '  count=$(expr $count + 1)'
            - '  if [ $(expr $count % 20) -eq "0" ]'
            - '  then'
            - '    sleep 5'
            - '  fi'
            - 'done'
            - 'wait'

    result_parse:
        constant:
            compiler:
                const: '{{compilers.name}}/{{compilers.version}}'
            mpi:
                const: '{{mpis.name}}/{{mpis.version}}'
        #    omp_num_threads:
        #        const: '{{omp_num_threads}}'
            stream_cache_array_size:
                const: '{{stream_array_size}}'
            tasks_per_node:
                const: '{{sched.tasks_per_node}}'
        regex:
            result:
                regex: 'Solution Validates:'
                action: store_true
                files: '*stream'
                per_file: all
            ARRAY_SIZE:
                regex: 'N=(.*)'
                action: store
            NTIMES:
                regex: 'NTIMES=(.*)'
                action: store
            units:
                regex: '(.B/s)'
                action: store
                match_select: all
                files: '*stream'
                per_file: name
            copy:
                regex: '^Copy: *([0-9\.]*) '
                action: store_sum
                match_select: all
                files: '*stream'
                per_file: name
            scale:
                regex: '^Scale: *([0-9\.]*) '
                action: store_sum
                match_select: all
                files: '*stream'
                per_file: name
            add:
                regex: '^Add: *([0-9\.]*) '
                action: store_sum
                match_select: all
                files: '*stream'
                per_file: name
            triad:
                regex: '^Triad: *([0-9\.]*) '
                action: store_min
                match_select: all
                files: '*stream'
                per_file: name

hsw_xrds:
    inherits_from: _base
    only_if:
        "{{sys_os.name}}{{sys_os.version}}": [ cle7.0 ]
    variables:
        arch: "hsw"
        stream_array_size: 13400000
        target: "xrds-stream.exe"
        omp_num_threads: [1, 2, 4, 8, 16, 32]

cts1_xrds:
    inherits_from: _base
    only_if:
        "{{sys_os.name}}{{sys_os.version}}": [ toss3 ]
    variables:
        arch: "cts1"
        stream_array_size: 15000000
        target: "xrds-stream.exe"
        omp_num_threads: [1, 2, 4, 8, 16, 32, 36]
        #omp_places: [cores, sockets]
        #omp_proc_bind: [true]

chicoma_rome:
    inherits_from: _base
    only_if:
        "{{sys_name}}": [ chicoma, chicoma2 ]
    variables:
        arch: "rome"
        stream_array_size: 85333333
        target: "xrds-stream.exe"
        omp_num_threads: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        #omp_places: [cores, sockets]
        #omp_proc_bind: [true]

spr_ddr5_xrds:
    inherits_from: _base
    only_if:
        "{{sys_name}}": [ rocinante, crossroads, razorback, tycho ]
    variables:
        arch: "spr"
        stream_array_size: [800000000,1000000000]
        #stream_array_size: 35840000
        target: "xrds-stream.exe"
        #omp_num_threads: [112]
        omp_num_threads: [110, 111, 112, 222, 223, 224]
        #omp_places: [threads,cores]
        #omp_proc_bind: [spread,close]

spr_hbm_xrds:
    inherits_from: _base
    only_if:
        "{{sys_name}}": [ darwin ]
    variables:
        arch: "spr"
        stream_array_size: 38400000
        target: "xrds-stream.exe"
        omp_num_threads: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
        #omp_places: [cores, sockets]
        #omp_proc_bind: [true]

    schedule:
      partition: 'crossroads-spr-hbm'

spr_xrds_noomp_flood:
    subtitle: '{{compilers.name}}/{{compilers.version}} {{mpis.name}}/{{mpis.version}} NTASKS: {{num_tasks}} ARRAY_SIZE: {{stream_array_size}}'
    inherits_from: _base
    permute_on:
        - num_tasks
        - compilers
        - mpis
#        - stream_array_size
    only_if:
        "{{sys_name}}": [tycho, rocinante, crossroads, razorback]
    variables:
        arch: "spr"
        #stream_array_size: '{{ num_tasks*20000000 }}'
        stream_array_size: '4500000000'
        target: "stream_mpi.exe"
        num_tasks: [104, 111, 112]
        target: "xroads-stream-avx512"
    run:
        timeout: 20000
        env:
            CC: '{{compilers.cc}}'
            OMP_NUM_THREADS: 1
    build:
        source_path: stream/src/stream-xroads-aff
        #source_path: stream/src
        on_nodes: true
        preamble: "[~{{preamble}}\n~]"
        cmds:
            - 'NTIMES=${NTIMES:=10}'
            - 'N={{stream_array_size}}'
            - ''
            - 'if [[ "{{compilers.name}}" =\~ intel ]] ; then '
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-O3 -fma -ffreestanding -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES -mcmodel=medium"'
            - '   PAV_FFLAGS="-O3"'
            - 'elif [[ "{{compilers.name}}" =\~ cce ]] ; then'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-floop-trips=huge -Ofast -march=sapphirerapids -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"'
            - '   PAV_FFLAGS="-O3"'
            - 'else'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-O3 -ffreestanding -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"'
            - '   PAV_FFLAGS="-O3"'
            - 'fi'
            - 'export PAV_CC PAV_FC PAV_CFLAGS PAV_FFLAGS PAV_MPICC'
            - 'make clean'
            - 'make {{target}} || exit 1'
            - '[ -x {{target}} ] || exit 1'
    schedule:
        tasks_per_node: '{{num_tasks}}'
        slurm:
#            sbatch_extra:
#                - '--core-spec=0'
#NUMA node0 CPU(s):               0-13,112-125
#NUMA node1 CPU(s):               14-27,126-139
#NUMA node2 CPU(s):               28-41,140-153
#NUMA node3 CPU(s):               42-55,154-167
#NUMA node4 CPU(s):               56-69,168-181
#NUMA node5 CPU(s):               70-83,182-195
#NUMA node6 CPU(s):               84-97,196-209
#NUMA node7 CPU(s):               98-111,210-223
            srun_extra+:
                - '--distribution=block:cyclic'

spr_xrds_single_omp:
    inherits_from: _base
    subtitle: '{{compilers.name}}/{{compilers.version}} {{mpis.name}}/{{mpis.version}} NTASKS: {{num_tasks}} ARRAY: {{stream_array_size}} OMP_NUM_THREADS={{omp_num_threads}}'
    permute_on:
        - stream_array_size
#        - omp_num_threads
    only_if:
        "{{sys_name}}": [tycho, rocinante, crossroads, razorback]
    variables:
        arch: "spr"
        stream_array_size: [ 4500000000 ] #,400000000,600000000,800000000]
        target: "xroads-stream-avx512"
        num_tasks: 1
        omp_num_threads: [ 110, 112, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104 ]
    build:
        source_path: stream/src/stream-xroads-aff
        on_nodes: true
        preamble: "[~{{preamble}}\n~]"
        cmds:
            - 'NTIMES=${NTIMES:=10}'
            - 'N={{stream_array_size}}'
            - ''
            - 'if [[ "{{compilers.name}}" =\~ intel ]] ; then '
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-qopenmp -O3 -xCORE-AVX512 -fma -ffreestanding -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES -mcmodel=medium"'
            - '   PAV_FFLAGS="-O3"'
            - '   EXE="{{target}}"'
            - 'elif [[ "{{compilers.name}}" =\~ cce ]] ; then'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-floop-trips=huge -Ofast -march=sapphirerapids -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"'
            - '   PAV_FFLAGS="-O3"'
            - 'else'
            - '   PAV_CC={{compilers.cc}}'
            - '   PAV_MPICC={{compilers.cc}}'
            - '   PAV_FC={{compilers.fc}}'
            - '   PAV_CFLAGS="-O3 -ffreestanding -DSTREAM_ARRAY_SIZE=$N -DNTIMES=$NTIMES"'
            - '   PAV_FFLAGS="-O3"'
            - 'fi'
            - 'export PAV_CC PAV_FC PAV_CFLAGS PAV_FFLAGS PAV_MPICC'
            - 'make clean'
            - 'make {{target}} || exit 1'
            - '[ -x {{target}} ] || exit 1'
    run:
        env:
            CC: '{{compilers.cc}}'
#            OMP_NUM_THREADS: '{{omp_num_threads}}'
    schedule:
        nodes: 25
        tasks_per_node: '{{num_tasks}}'
        slurm:
            srun_extra:
                #- '--distribution=cyclic:cyclic'
            sbatch_extra:
                - '-S 0'
